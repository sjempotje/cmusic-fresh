{
	"info": {
		"_postman_id": "66e44774-421e-4c6f-b9ad-f0b27b59b189",
		"name": "YouTube Music",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search Test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(pm.response.json());\r",
							"    console.log(digestSearchResults(pm.response.json()));\r",
							"});\r",
							"\r",
							"function digestSearchResults(json) {\r",
							"    let final = {\r",
							"        results: 0,\r",
							"        shelves: [],\r",
							"        insteadOption: null,\r",
							"        suggestionOption: null,\r",
							"        reason: null\r",
							"    };\r",
							"\r",
							"    let sectionList = json.contents.tabbedSearchResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents;\r",
							"    if (sectionList[0].hasOwnProperty(\"itemSectionRenderer\")) {\r",
							"\r",
							"        let itemSection = sectionList[0].itemSectionRenderer.contents[0];\r",
							"        \r",
							"        if (itemSection.hasOwnProperty(\"messageRenderer\")) {\r",
							"            let message = itemSection.messageRenderer.text.runs[0].text;\r",
							"            final.reason = message;\r",
							"            return final;\r",
							"\r",
							"        } else if (itemSection.hasOwnProperty(\"didYouMeanRenderer\")) {\r",
							"            final.suggestionOption = {correctedList: [], endpoints: {text: \"\", query: \"\"}};\r",
							"            let renderer = itemSection.didYouMeanRenderer;\r",
							"\r",
							"            final.suggestionOption.endpoints.query = renderer.correctedQueryEndpoint.searchEndpoint.query;\r",
							"            for (let dym = 0; dym < renderer.didYouMean.runs.length; dym++)\r",
							"                final.suggestionOption.endpoints.text += renderer.didYouMean.runs[dym].text;\r",
							"            \r",
							"            for (let crq = 0; crq < renderer.correctedQuery.runs.length; crq++)\r",
							"                final.suggestionOption.correctedList.push(renderer.correctedQuery.runs[crq]);\r",
							"            \r",
							"\r",
							"        } else if (itemSection.hasOwnProperty(\"showingResultsForRenderer\")) {\r",
							"            final.insteadOption = {correctedList: [], originalList: [], endpoints: {corrected: {text: \"\", query: \"\"}, original: {text: \"\", query: \"\"}}};\r",
							"\r",
							"            let renderer = itemSection.showingResultsForRenderer;\r",
							"\r",
							"            for (let srf = 0; srf < renderer.showingResultsFor.runs.length; srf++)\r",
							"                final.insteadOption.endpoints.corrected.text += renderer.showingResultsFor.runs[srf].text;\r",
							"\r",
							"            for (let sif = 0; sif < renderer.searchInsteadFor.runs.length; sif++)\r",
							"                final.insteadOption.endpoints.original.text += renderer.searchInsteadFor.runs[sif].text;\r",
							"\r",
							"            for (let cq = 0; cq < renderer.correctedQuery.runs.length; cq++) {\r",
							"                final.insteadOption.correctedList.push(renderer.correctedQuery.runs[cq]);\r",
							"                final.insteadOption.endpoints.corrected.query += renderer.correctedQuery.runs[cq].text;\r",
							"            }\r",
							"\r",
							"            for (let oq = 0; oq < renderer.originalQuery.runs.length; oq++) {\r",
							"                final.insteadOption.originalList.push(renderer.originalQuery.runs[oq]);\r",
							"                final.insteadOption.endpoints.original.query += renderer.originalQuery.runs[oq].text;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    for (let sl = 0; sl < sectionList.length; sl++) {\r",
							"        let itemSection = sectionList[sl];\r",
							"\r",
							"        if (itemSection.hasOwnProperty(\"musicShelfRenderer\")) {\r",
							"            let musicShelf = itemSection.musicShelfRenderer;\r",
							"\r",
							"            let titlelist = musicShelf.title.runs;\r",
							"            let title = \"\";\r",
							"\r",
							"            for (let ttl = 0; ttl < titlelist.length; ttl++)\r",
							"                title += titlelist[ttl].text;\r",
							"\r",
							"            let bottomEndpoint = null;\r",
							"            if (musicShelf.hasOwnProperty(\"bottomEndpoint\")) {\r",
							"                let bottomText = \"\";\r",
							"                let textArray = musicShelf.bottomText.runs;\r",
							"                for (let botText = 0; botText < textArray.length; botText++) {\r",
							"                    bottomText += textArray[botText].text;\r",
							"                }\r",
							"\r",
							"                bottomEndpoint = {\r",
							"                    query: musicShelf.bottomEndpoint.searchEndpoint.query,\r",
							"                    params: musicShelf.bottomEndpoint.searchEndpoint.params,\r",
							"                    text: bottomText\r",
							"                };\r",
							"            }\r",
							"\r",
							"            let shelf = {\r",
							"                title: title,\r",
							"                bottomEndpoint: bottomEndpoint,\r",
							"                data: []\r",
							"            };\r",
							"\r",
							"            let responsiveMusicList = musicShelf.contents;\r",
							"            for (let rml = 0; rml < responsiveMusicList.length; rml++) {\r",
							"                let responsiveMusicItem = responsiveMusicList[rml].musicResponsiveListItemRenderer;\r",
							"                let entry = {\r",
							"                    title: \"\",\r",
							"                    subtitle: \"\",\r",
							"                    secondTitle: \"\",\r",
							"                    secondSubtitle: \"\",\r",
							"                    additionalInfo: \"\",\r",
							"                    videoId: null,\r",
							"                    playlistId: null,\r",
							"                    browseId: null,\r",
							"                    thumbnail: null\r",
							"                };\r",
							"                \r",
							"                let flexColumnList = responsiveMusicItem.flexColumns;\r",
							"\r",
							"                for (let fcl = 0; fcl < flexColumnList.length; fcl++) {\r",
							"                    let flexColumn = flexColumnList[fcl].musicResponsiveListItemFlexColumnRenderer;\r",
							"\r",
							"                    if (flexColumn.text != undefined) {\r",
							"                        let textList = flexColumn.text.runs;\r",
							"\r",
							"                        let text = \"\";\r",
							"                        for (let txt = 0; txt < textList.length; txt++)\r",
							"                            text += textList[txt].text;\r",
							"\r",
							"                        if (fcl == 0)\r",
							"                            entry.title = text;\r",
							"                        else if (fcl == 1)\r",
							"                            entry.subtitle = text;\r",
							"                        else\r",
							"                            break;\r",
							"                    }\r",
							"                }\r",
							"                \r",
							"                let thumbnaillist = responsiveMusicItem.thumbnail.musicThumbnailRenderer.thumbnail.thumbnails;\r",
							"                entry.thumbnail = thumbnaillist[0].url;\r",
							"                \r",
							"                if (responsiveMusicItem.hasOwnProperty(\"navigationEndpoint\")) {\r",
							"                    if (responsiveMusicItem.navigationEndpoint.hasOwnProperty(\"watchEndpoint\")) {\r",
							"                        entry.type = \"Title\";\r",
							"                        entry.playlistId = responsiveMusicItem.navigationEndpoint.watchEndpoint.playlistId;\r",
							"                        entry.videoId = responsiveMusicItem.navigationEndpoint.watchEndpoint.videoId;\r",
							"\r",
							"                    } else {\r",
							"                        let type = responsiveMusicItem.navigationEndpoint.browseEndpoint.browseEndpointContextSupportedConfigs.browseEndpointContextMusicConfig.pageType;\r",
							"                        if (type == \"MUSIC_PAGE_TYPE_ARTIST\")\r",
							"                            entry.type = \"Artist\";\r",
							"                        else {\r",
							"                            if (type == \"MUSIC_PAGE_TYPE_ALBUM\")\r",
							"                                entry.type = \"Album\";\r",
							"                            else if (type == \"MUSIC_PAGE_TYPE_PLAYLIST\")\r",
							"                                entry.type = \"Playlist\";\r",
							"\r",
							"                            let playNavigationEndpoint = responsiveMusicItem.overlay.musicItemThumbnailOverlayRenderer.content.musicPlayButtonRenderer.playNavigationEndpoint;\r",
							"\r",
							"                            if (playNavigationEndpoint.hasOwnProperty(\"watchPlaylistEndpoint\"))\r",
							"                                entry.playlistId = playNavigationEndpoint.watchPlaylistEndpoint.playlistId;\r",
							"                            else\r",
							"                                entry.playlistId = playNavigationEndpoint.watchEndpoint.playlistId;\r",
							"                            \r",
							"                        }\r",
							"\r",
							"                        entry.browseId = responsiveMusicItem.navigationEndpoint.browseEndpoint.browseId;\r",
							"                    }\r",
							"                } else {\r",
							"                    entry.type = \"Title\";\r",
							"                    \r",
							"                    entry.videoId = responsiveMusicItem.playlistItemData.videoId;\r",
							"                    entry.playlistId = responsiveMusicItem.flexColumns[0].musicResponsiveListItemFlexColumnRenderer.text.runs[0].navigationEndpoint.watchEndpoint.playlistId;\r",
							"                }\r",
							"\r",
							"                final.results += 1;\r",
							"                console.log(final.results);\r",
							"                console.log(entry);\r",
							"                shelf.data.push(entry);\r",
							"            }\r",
							"\r",
							"            console.log(\"done: \" + shelf.title);\r",
							"            final.shelves.push(shelf);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    return final;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Referer",
						"value": "https://music.youtube.com",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"context\": {\r\n        \"client\": {\r\n            \"clientName\": \"WEB_REMIX\",\r\n            \"clientVersion\": \"0.1\"\r\n        },\r\n        \"user\": {\r\n            \"enableSafetyMode\": false\r\n        }\r\n    },\r\n    \"query\": \"hey\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://music.youtube.com/youtubei/v1/search?alt=json&key=AIzaSyC9XL3ZjWddXya6X74dJoCTL-WEYFDNX30",
					"protocol": "https",
					"host": [
						"music",
						"youtube",
						"com"
					],
					"path": [
						"youtubei",
						"v1",
						"search"
					],
					"query": [
						{
							"key": "alt",
							"value": "json"
						},
						{
							"key": "key",
							"value": "AIzaSyC9XL3ZjWddXya6X74dJoCTL-WEYFDNX30"
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Suggestion",
			"request": {
				"method": "GET",
				"header": [],
				"url": null
			},
			"response": []
		},
		{
			"name": "Player",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function digestStreams(parse) {\r",
							"    let videoId = parse.videoDetails.videoId;\r",
							"\r",
							"    for (let i = 0; i < parse.streamingData.adaptiveFormats.length; i++) {\r",
							"        if (parse.streamingData.adaptiveFormats[i].mimeType.split(\"/\")[0] == \"audio\") {\r",
							"            return parse.streamingData.adaptiveFormats[i].url;\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Stream Test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(pm.response.json());\r",
							"    console.log(digestStreams(pm.response.json()));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"user-agent": true,
					"accept": true,
					"accept-encoding": true,
					"content-type": true,
					"connection": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Referer",
						"value": "https://music.youtube.com",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"videoId\": \"heyE22SYhFI\",\r\n  \"context\": {\r\n    \"client\": {\r\n      \"hl\": \"en\",\r\n      \"gl\": \"US\",\r\n      \"clientName\": \"ANDROID\",\r\n      \"clientVersion\": \"16.02\"\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://youtubei.googleapis.com/youtubei/v1/player?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8",
					"protocol": "https",
					"host": [
						"youtubei",
						"googleapis",
						"com"
					],
					"path": [
						"youtubei",
						"v1",
						"player"
					],
					"query": [
						{
							"key": "key",
							"value": "AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Next",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Playlist Test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(pm.response.json());\r",
							"    console.log(digestNextResults(pm.response.json()));\r",
							"});\r",
							"\r",
							"function digestNextResults(json) {\r",
							"    console.log(json);\r",
							"    let playlist = {\r",
							"        list: [],\r",
							"        index: 0\r",
							"    }\r",
							"\r",
							"    let playlistRenderer;\r",
							"    if (json.contents.singleColumnMusicWatchNextResultsRenderer.hasOwnProperty(\"playlist\"))\r",
							"        playlistRenderer = json.contents.singleColumnMusicWatchNextResultsRenderer\r",
							"                                .playlist.playlistPanelRenderer;\r",
							"    else {\r",
							"        if (json.contents.singleColumnMusicWatchNextResultsRenderer\r",
							"            .tabbedRenderer.watchNextTabbedResultsRenderer\r",
							"            .tabs[0].tabRenderer.content.musicQueueRenderer\r",
							"            .hasOwnProperty(\"content\"))\r",
							"            playlistRenderer = json.contents.singleColumnMusicWatchNextResultsRenderer\r",
							"                .tabbedRenderer.watchNextTabbedResultsRenderer\r",
							"                .tabs[0].tabRenderer.content.musicQueueRenderer\r",
							"                .content.playlistPanelRenderer;\r",
							"        else {\r",
							"            playlist = playlist;\r",
							"            let currentVideoId = json.currentVideoEndpoint.watchEndpoint.videoId;\r",
							"\r",
							"            \r",
							"            for (let i = 0; i < playlist.list.length; i++) {\r",
							"                if (playlist.list[i].id == currentVideoId) {\r",
							"                    playlist.index = i;\r",
							"                    return playlist;\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"        \r",
							"\r",
							"    playlist.index = json.currentVideoEndpoint.watchEndpoint.index;\r",
							"\r",
							"    for (let i = 0; i < playlistRenderer.contents.length; i++) {\r",
							"        if (!playlistRenderer.contents[i].hasOwnProperty(\"playlistPanelVideoRenderer\")) {\r",
							"            continue;\r",
							"        }\r",
							"\r",
							"        let panelRenderer = playlistRenderer.contents[i].playlistPanelVideoRenderer;\r",
							"\r",
							"        console.log(playlistRenderer.contents[i]);\r",
							"\r",
							"        let videoId = panelRenderer.navigationEndpoint.watchEndpoint.videoId;\r",
							"        let playlistId = panelRenderer.navigationEndpoint.watchEndpoint.playlistId;\r",
							"    \r",
							"        let titleList = panelRenderer.title.runs;\r",
							"        let title = \"\";\r",
							"        for (let titleI = 0; titleI < titleList.length; titleI++)\r",
							"            title += titleList[titleI].text;\r",
							"    \r",
							"        let subtitleList = panelRenderer.shortBylineText.runs;\r",
							"        let artist = \"\";\r",
							"        for (let subtitleI = 0; subtitleI < subtitleList.length; subtitleI++)\r",
							"            artist += subtitleList[subtitleI].text;\r",
							"\r",
							"        let thumbnailList = panelRenderer.thumbnail.thumbnails;\r",
							"\r",
							"        let artwork = thumbnailList[thumbnailList.length - 1].url;\r",
							"        let duration = textToSec(panelRenderer.lengthText.runs[0].text);\r",
							"\r",
							"        let track = {\r",
							"            id: videoId,\r",
							"            playlistId: playlistId,\r",
							"            title: title,\r",
							"            url: null,\r",
							"            artist: artist,\r",
							"            artwork: artwork,\r",
							"            duration: duration,\r",
							"\r",
							"            isLiked: false,\r",
							"            isDisliked: false\r",
							"        };\r",
							"\r",
							"        playlist.list.push(track);\r",
							"    }\r",
							"\r",
							"    return playlist;\r",
							"}\r",
							"\r",
							"function textToSec(text) {\r",
							"    let array = text.split(\":\");\r",
							"\r",
							"    let hours;\r",
							"    let minutes;\r",
							"    let seconds;\r",
							"\r",
							"    if (array.length == 3) {\r",
							"        hours = Number.parseInt(array[0] * 3600);\r",
							"        minutes = Number.parseInt(array[1]) * 60;\r",
							"        seconds = Number.parseInt(array[2]);\r",
							"    } else {\r",
							"        hours = 0;\r",
							"        minutes = Number.parseInt(array[0]) * 60;\r",
							"        seconds = Number.parseInt(array[1]);\r",
							"    }\r",
							"\r",
							"    return minutes + seconds + hours;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"user-agent": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Referer",
						"value": "https://music.youtube.com",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"context\": {\r\n        \"client\": {\r\n            \"clientName\": \"WEB_REMIX\",\r\n            \"clientVersion\": \"0.1\"\r\n        }\r\n    },\r\n    \"enablePersistentPlaylistPanel\": true,\r\n    \"isAudioOnly\": true,\r\n    \"videoId\": \"s51URsGalls\",\r\n    \"playlistId\": \"RDAMVMs51URsGalls\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://music.youtube.com/youtubei/v1/next?alt=json&key=AIzaSyC9XL3ZjWddXya6X74dJoCTL-WEYFDNX30",
					"protocol": "https",
					"host": [
						"music",
						"youtube",
						"com"
					],
					"path": [
						"youtubei",
						"v1",
						"next"
					],
					"query": [
						{
							"key": "alt",
							"value": "json"
						},
						{
							"key": "key",
							"value": "AIzaSyC9XL3ZjWddXya6X74dJoCTL-WEYFDNX30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let configuration;\r",
							"\r",
							"pm.test(\"Configuration Test\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    configuration = extractConfiguration(pm.response.text()); \r",
							"    console.log(configuration);\r",
							"});\r",
							"\r",
							"pm.test(\"Home Test\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    let results;\r",
							"    for (let element of configuration.YTMUSIC_INITIAL_DATA)\r",
							"        if (element.path == \"/browse\")\r",
							"            results = digestHomeResults(element.data);\r",
							"\r",
							"    console.log(results);\r",
							"});\r",
							"\r",
							"function extractConfiguration(html) {\r",
							"    let ytData = {};\r",
							"\r",
							"    let ytcfg = {set: object => {\r",
							"        for (key of Object.keys(object)) {\r",
							"            ytData[key] = object[key];\r",
							"            \r",
							"            if (key == \"YTMUSIC_INITIAL_DATA\") {\r",
							"                ytData[key].map((element, index) =>\r",
							"                    ytData[key][index].data = JSON.parse(element.data)\r",
							"                );\r",
							"            }\r",
							"        }\r",
							"    }};\r",
							"\r",
							"    let setMessage = msgs => ytData.MESSAGES = msgs;\r",
							"\r",
							"    let initialData = [];\r",
							"\r",
							"    while (html.includes(\"<script\")) {\r",
							"        html = html.slice(html.indexOf(\"<script\"));\r",
							"\r",
							"        let part = html.slice(html.indexOf(\">\"), html.indexOf(\"</\"));\r",
							"\r",
							"        while (part.includes(\"initialData.push(\")) {\r",
							"            let dataOne = part.indexOf(\"initialData.push(\");\r",
							"            let dataTwo = part.indexOf(\");\") + 2;\r",
							"            eval(part.slice(dataOne, dataTwo))\r",
							"            part = part.slice(dataTwo);\r",
							"        }\r",
							"\r",
							"        if (part.includes(\"ytcfg.set(\")) {\r",
							"            let yOne = part.indexOf(\"ytcfg.set(\") + 10;\r",
							"            part = part.slice(yOne);\r",
							"            let yTwo = part.indexOf(\"</\");\r",
							"        \r",
							"            let slice = part.slice(0, yTwo).replace(\",}\", \"}\").replace(/\\'/g, '\"');\r",
							"            \r",
							"            if (slice.includes(\");\"))\r",
							"                slice = slice.slice(0, slice.indexOf(\");\"));\r",
							"\r",
							"            try {\r",
							"                if (slice[slice.length - 1] == \")\")\r",
							"                    slice = slice.slice(0, slice.length - 1);\r",
							"\r",
							"                if (slice.includes(\"initialData\"))\r",
							"                    slice = slice.replace(\"initialData\", JSON.stringify(initialData));\r",
							"                \r",
							"                ytcfg.set(JSON.parse(slice));\r",
							"            } catch (e) {\r",
							"                console.error(e);\r",
							"            }\r",
							"        }\r",
							"        \r",
							"        if (part.includes(\"setMessage(\")) {\r",
							"            part = part.slice(part.indexOf(\"setMessage(\") + 11);\r",
							"            part = part.slice(0, part.indexOf(\");\"));\r",
							"            setMessage(JSON.parse(part));\r",
							"        }\r",
							"\r",
							"        html = html.slice(html.indexOf(\"</\"));\r",
							"    }\r",
							"\r",
							"    return ytData;\r",
							"}\r",
							"\r",
							"function digestHomeResults(json) {\r",
							"    let tabRenderer = json.contents.singleColumnBrowseResultsRenderer.tabs[0].tabRenderer;\r",
							"    \r",
							"    let sectionList = null;\r",
							"    if (tabRenderer.hasOwnProperty(\"content\"))\r",
							"        sectionList = tabRenderer.content.sectionListRenderer;\r",
							"    else\r",
							"        sectionList = json.continuationContents.sectionListContinuation;\r",
							"\r",
							"    let final = {background: null, shelves: [], continuation: null};\r",
							"    if (sectionList.hasOwnProperty(\"continuations\")) {\r",
							"        let continuations = sectionList.continuations[0].nextContinuationData;\r",
							"        final.continuation = {\r",
							"            continuation: continuations.continuation,\r",
							"            itct: continuations.clickTrackingParams\r",
							"        }\r",
							"    }\r",
							"\r",
							"    let contentList = sectionList.contents;\r",
							"    console.log(contentList);\r",
							"    for (let y = 0; y < contentList.length; y++) {\r",
							"        let shelf = {title: \"\", albums: []};\r",
							"        let shelfRenderer;\r",
							"\r",
							"        if (contentList[y].hasOwnProperty(\"musicImmersiveCarouselShelfRenderer\")) {\r",
							"            shelfRenderer = contentList[y].musicImmersiveCarouselShelfRenderer;\r",
							"\r",
							"            let index = shelfRenderer.backgroundImage.simpleVideoThumbnailRenderer.thumbnail.thumbnails.length - 1;\r",
							"            final.background = shelfRenderer.backgroundImage.simpleVideoThumbnailRenderer.thumbnail.thumbnails[index].url;\r",
							"\r",
							"        } else if (contentList[y].hasOwnProperty(\"musicCarouselShelfRenderer\"))\r",
							"            shelfRenderer = contentList[y].musicCarouselShelfRenderer;\r",
							"\r",
							"        else continue;\r",
							"\r",
							"        for (let l = 0; l < shelfRenderer.header.musicCarouselShelfBasicHeaderRenderer.title.runs.length; l++)\r",
							"            shelf.title += shelfRenderer.header.musicCarouselShelfBasicHeaderRenderer.title.runs[l].text;\r",
							"\r",
							"        for (let m = 0; m < shelfRenderer.contents.length; m++) {\r",
							"            let album = {title: \"\", subtitle: \"\"};\r",
							"            \r",
							"            let itemRenderer;\r",
							"            if (shelfRenderer.contents[m].hasOwnProperty(\"musicTwoRowItemRenderer\")) {\r",
							"                itemRenderer = shelfRenderer.contents[m].musicTwoRowItemRenderer;\r",
							"\r",
							"                for (let k = 0; k < itemRenderer.title.runs.length; k++)\r",
							"                    album.title += itemRenderer.title.runs[k].text;\r",
							"\r",
							"                for (let k = 0; k < itemRenderer.subtitle.runs.length; k++)\r",
							"                    album.subtitle += itemRenderer.subtitle.runs[k].text;\r",
							"\r",
							"                album.thumbnail = itemRenderer.thumbnailRenderer.musicThumbnailRenderer.thumbnail.thumbnails[0].url;\r",
							"            } else {\r",
							"                itemRenderer = shelfRenderer.contents[m].musicResponsiveListItemRenderer;\r",
							"\r",
							"                for (let k = 0; k < itemRenderer.flexColumns[0].musicResponsiveListItemFlexColumnRenderer.text.runs.length; k++)\r",
							"                    album.title += itemRenderer.flexColumns[0].musicResponsiveListItemFlexColumnRenderer.text.runs[k].text;\r",
							"\r",
							"                for (let k = 0; k < itemRenderer.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs.length; k++)\r",
							"                    album.subtitle += itemRenderer.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[k].text;\r",
							"\r",
							"                album.thumbnail = itemRenderer.thumbnail.musicThumbnailRenderer.thumbnail.thumbnails[0].url;\r",
							"            }\r",
							"\r",
							"            let videoId;\r",
							"            let browseId;\r",
							"            let playlistId;\r",
							"\r",
							"            let navigationEndpoint;\r",
							"            if (itemRenderer.hasOwnProperty(\"navigationEndpoint\"))\r",
							"                navigationEndpoint = itemRenderer.navigationEndpoint;\r",
							"            else\r",
							"                navigationEndpoint = itemRenderer.overlay.musicItemThumbnailOverlayRenderer.content.musicPlayButtonRenderer.playNavigationEndpoint;\r",
							"\r",
							"            if (navigationEndpoint.hasOwnProperty(\"watchEndpoint\")) {\r",
							"                if (navigationEndpoint.watchEndpoint.hasOwnProperty(\"watchPlaylistEndpoint\"))\r",
							"                    playlistId = playNavigationEndpoint.watchPlaylistEndpoint.playlistId;\r",
							"\r",
							"                if (navigationEndpoint.watchEndpoint.hasOwnProperty(\"videoId\"))\r",
							"                    videoId = navigationEndpoint.watchEndpoint.videoId;\r",
							"            }\r",
							"\r",
							"            if (navigationEndpoint.hasOwnProperty(\"browseEndpoint\")) {\r",
							"                if (navigationEndpoint.browseEndpoint.hasOwnProperty(\"browseId\"))\r",
							"                    browseId = navigationEndpoint.browseEndpoint.browseId;\r",
							"            }\r",
							"\r",
							"            if (browseId != undefined)\r",
							"                album.browseId = browseId;\r",
							"\r",
							"            if (playlistId != undefined)\r",
							"                album.playlistId = playlistId;\r",
							"\r",
							"            if (videoId != undefined)\r",
							"                album.videoId = videoId;\r",
							"\r",
							"            shelf.albums.push(album);\r",
							"        }\r",
							"        \r",
							"        final.shelves.push(shelf);\r",
							"    }\r",
							"\r",
							"    return final;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"user-agent": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Referer",
						"value": "https://music.youtube.com",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (X11; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://music.youtube.com/",
					"protocol": "https",
					"host": [
						"music",
						"youtube",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Video Info (Deprecated)",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Referer",
						"value": "https://www.youtube.com",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": "https://www.youtube.com",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://www.youtube.com/get_video_info?video_id=P0QqLPFFMEI&el=detailpage&c=WEB_REMIX&cver=0.1&cplayer=UNIPLAYER",
					"protocol": "https",
					"host": [
						"www",
						"youtube",
						"com"
					],
					"path": [
						"get_video_info"
					],
					"query": [
						{
							"key": "video_id",
							"value": "P0QqLPFFMEI"
						},
						{
							"key": "el",
							"value": "detailpage"
						},
						{
							"key": "c",
							"value": "WEB_REMIX"
						},
						{
							"key": "cver",
							"value": "0.1"
						},
						{
							"key": "cplayer",
							"value": "UNIPLAYER"
						}
					]
				}
			},
			"response": []
		}
	]
}